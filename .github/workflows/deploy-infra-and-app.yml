name: Provision & Deploy to DO

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bn-trading:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/bn-trading:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/bn-trading:buildcache,mode=max

  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: build
    outputs:
      droplet_ip: ${{ steps.set_ip.outputs.DROPLET_IP }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: infra
        run: terraform init

      - name: Terraform Validate
        working-directory: infra
        run: terraform validate

      - name: Terraform Apply
        id: apply
        working-directory: infra
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
        run: terraform apply -auto-approve -var="digitalocean_token=${{ secrets.DIGITALOCEAN_TOKEN }}" -var="ssh_key_id=${{ secrets.SSH_KEY_ID }}"

      - name: Set droplet IP output
        id: set_ip
        working-directory: infra
        run: |
          # Capture droplet IP quietly, suppressing any Terraform diagnostics
          ip=$(terraform output -raw droplet_ip 2>/dev/null | tr -d '\r\n')
          if [ -z "$ip" ]; then
            echo "Error: droplet_ip output is empty or unavailable" >&2
            exit 1
          fi
          echo "DROPLET_IP=$ip" >> $GITHUB_OUTPUT

  deploy:
    name: SSH & Deploy Application
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup SSH keys
        run: |
          sudo apt-get update && sudo apt-get install -y openssh-client
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          echo "Host *\n  StrictHostKeyChecking no\n  UserKnownHostsFile /dev/null" > ~/.ssh/config
          chmod 600 ~/.ssh/config
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ needs.terraform.outputs.droplet_ip }} >> ~/.ssh/known_hosts

      - name: Debug droplet IP output
        run: |
          echo "Droplet IP is: '${{ needs.terraform.outputs.droplet_ip }}'"

      - name: Wait for SSH
        run: |
          # Wait for SSH access, using SSH connection instead of nc
          for i in {1..30}; do
            echo "Attempt $i: Testing SSH connection..."
            if ssh -o BatchMode=yes -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i ~/.ssh/id_rsa root@${{ needs.terraform.outputs.droplet_ip }} exit 0; then
              echo "SSH is available"
              break
            fi
            sleep 10
            if [ $i -eq 30 ]; then
              echo "Error: SSH not available after multiple retries" >&2
              exit 1
            fi
          done

      - name: Deploy via SSH
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          ssh -i ~/.ssh/id_rsa root@${{ needs.terraform.outputs.droplet_ip }} << 'EOF'
            cd /bn-trading || { git clone https://github.com/${GITHUB_REPOSITORY}/ /bn-trading; cd /bn-trading; }
            docker-compose down || true
            docker-compose pull
            docker-compose up -d
          EOF

      - name: Verify Deployment
        run: |
          sleep 20
          RESPONSE=$(curl -s --max-time 10 http://${{ needs.terraform.outputs.droplet_ip }}:5000/)
          if echo "$RESPONSE" | grep -q "Bank Nifty Trading"; then
            echo "âœ… Deployment verified"
          else
            echo "ðŸš¨ Deployment verification failed" && exit 1
          fi